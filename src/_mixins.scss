/**
 * Mixins
 */

/// Prefix of the top level theme class
/// e.g. #{$default-prefix}-light -> theme-light
///
/// @type String
$default-prefix: 'theme' !default;

/// Creates theme variations
///
/// @param {Map} $themes - Theme map to loop through. Optional.
@mixin themify($themes: $themes) {
    // for each theme, get its name and color variable map:
    @each $theme, $colors in $themes {
        // re-export the color map under the global scope so the
        // `themed` function below can access it inside the content:
        $theme-map: $colors !global;

        :global(.#{$default-prefix}-#{$theme}) & {
            @content;
        }

        // reset the theme-map global variable:
        $theme-map: null !global;
    }
}

/// Gets a value from the color map.
///
/// @param {String} $key - Name of the color variable
/// @param {Map} $theme-map - Theme map to use. Optional.
///
/// @returns {String} The color for the given key
@function themed($key, $theme-map: $theme-map) {
    $value: map-get($theme-map, $key);

    @if not $value {
        @error 'There is no `#{$key}` in your theme colors.';
    }

    @return $value;
}

/// Clickable button animation
///
/// @param {Number} $scale - Clickable scale
/// @param {Number} $duration - Interaction timing.
///
@mixin clickable($scale, $duration) {
    transition-property: transform, background-color !important;
    transition-duration: $duration !important;

    transform: scale(1);
    cursor: pointer;
    &:active {
        transform: scale($scale);
    }
}

/// Right to left 
///
@mixin rtl {
    :global(.rtl) {
        @content;
    }
}

/// Box sizing
///
/// @param {String} $boxmodel - The box model e.g. border-box
///
@mixin box-sizing($boxmodel) {
    -webkit-box-sizing: $boxmodel;
    -moz-box-sizing: $boxmodel;
    box-sizing: $boxmodel;
}